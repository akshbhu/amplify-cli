// import { $TSContext, $TSObject, JSONUtilities } from 'amplify-cli-core';
// import { FunctionParameters } from 'amplify-function-plugin-interface';
// import { getResourcesforCFN, generateEnvVariablesforCFN } from '../../../../provider-utils/awscloudformation/service-walkthroughs/execPermissionsWalkthrough';
// import { updateCFNFileForResourcePermissions } from '../../../../provider-utils/awscloudformation/service-walkthroughs/lambda-walkthrough';
// import { loadFunctionParameters } from '../../../../provider-utils/awscloudformation/utils/loadFunctionParameters';
// import path from 'path';
// import { functionParametersFileName, ServiceName } from '../../../../provider-utils/awscloudformation/utils/constants';
// import { category } from '../../../../constants';
// import { buildFunction } from '../../../../provider-utils/awscloudformation/utils/buildFunction';

// jest.mock('amplify-cli-core');
// jest.mock('path')

// describe('update CFN Content on functions depends on API', () => {
//   beforeEach(() => {
//     jest.clearAllMocks();
//   });
//   const runtimePlugin_stub = ({
//     checkDependencies: jest.fn().mockResolvedValue({ hasRequiredDependencies: true }),
//     build: jest.fn().mockResolvedValue({ rebuilt: true }),
//   } as unknown) as jest.Mocked<FunctionRuntimeLifecycleManager>;

//   const context_stub = ({
//     amplify: {
//       readBreadcrumbs: jest.fn().mockReturnValue({ pluginId: 'testPluginId' }),
//       loadRuntimePlugin: jest.fn().mockResolvedValue(runtimePlugin_stub),
//       updateamplifyMetaAfterBuild: jest.fn(),
//     },
//   } as unknown) as jest.Mocked<$TSContext>;

//   const allResourceStub = [

//   ]
//   it('delegates dependency checks to the runtime manager before building', async () => {
//     let depCheck = false;
//     runtimePlugin_stub.checkDependencies.mockImplementationOnce(async () => {
//       depCheck = true;
//       return {
//         hasRequiredDependencies: true,
//       };
//     });

//     runtimePlugin_stub.build.mockImplementationOnce(async () => {
//       if (!depCheck) {
//         throw new Error('Dep check not called before build');
//       }
//       return {
//         rebuilt: true,
//       };
//     });

//     await buildFunction(context_stub, { resourceName: 'testFunc' });

//     expect(runtimePlugin_stub.checkDependencies.mock.calls.length).toBe(1);
//     expect(runtimePlugin_stub.build.mock.calls.length).toBe(1);
//   });

//   it('updates amplify meta after prod', async () => {
//     await buildFunction(context_stub, { resourceName: 'testFunc' });

//     expect((context_stub.amplify.updateamplifyMetaAfterBuild as jest.Mock).mock.calls[0]).toEqual([
//       { category: 'function', resourceName: 'testFunc' },
//       'PROD',
//     ]);
//   });

//   it('updates amplify meta after dev build', async () => {
//     await buildFunction(context_stub, { resourceName: 'testFunc', buildType: BuildType.DEV });

//     expect((context_stub.amplify.updateamplifyMetaAfterBuild as jest.Mock).mock.calls[0]).toEqual([
//       { category: 'function', resourceName: 'testFunc' },
//       'DEV',
//     ]);
//   });

//   it('doesnt update amplify meta if function not rebuilt', async () => {
//     runtimePlugin_stub.build.mockResolvedValueOnce({ rebuilt: false });

//     await buildFunction(context_stub, { resourceName: 'testFunc' });

//     expect((context_stub.amplify.updateamplifyMetaAfterBuild as jest.Mock).mock.calls.length).toBe(0);
//   });
// });
