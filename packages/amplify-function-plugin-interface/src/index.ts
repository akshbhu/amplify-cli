/**
 * Parameters that are passed between plugins and used to build the set of parameters that will be used to generate the function.
 */
export interface FunctionParameters {
  providerContext?: ProviderContext   // higher level context around the function
  cloudResourceTemplatePath?: string  // absolute path to the cloud resource template (for now this is always a CFN template)
  resourceName?: string               // name of this resource
  functionName?: string               // name of this function
  runtime?: FunctionRuntime           // runtime metadata for the function
  roleName?: string                   // IAM role that this function will assume
  dependsOn?: FunctionDependency[]    // resources this function depends on
  functionTemplate?: FunctionTemplate // fully describes the template that will be used
  categoryPolicies?: any              // IAM policies that should be applied to this lambda
  skipEdit?: boolean                  // Whether or not to prompt to edit the function after creation
  parametersFileObj?: any             // Contains the object that is written to function-parameters.json. Kindof a hold-over from older code
  resourceProperties?: any            // Existing function environment variable map. Should refactor to use dependsOn directly
  triggerEventSourceMappings?: any    // Used for dynamo / kinesis function triggers. May want to refactor
  topLevelComment?: string            // LEGACY Used to write available environment variables at top of template files
}

/**
 * Deprecated
 *
 * This is the old parameters object that was used to define trigger templates.
 * New changes should use the above FunctionParameters (with modifications if necessary)
 */
export interface FunctionTriggerParameters {
  trigger: boolean // discriminant to determine if parameters are trigger params
  key: string // name of the trigger template
  modules: any[]
  parentResource: string
  functionName: string
  resourceName: string
  parentStack: string
  triggerEnvs: any
  triggerIndexPath: string
  triggerPackagePath: string
  triggerDir: string
  roleName: string
  triggerTemplate: string
  triggerEventPath: string
  skipEdit: boolean
  functionTemplate?: FunctionTemplate
  cloudResourceTemplatePath?: string
}

export interface ProviderContext {
  provider: string
  service: string
  projectName: string
}

export interface FunctionRuntime {
  name: string
  defaultHandler: string
}

export interface FunctionTemplate {
  handler?: string // lambda handler entry point in the template
  parameters?: any // map of parameters to populate the template files
  sourceRoot: string // absolute path to the root of the template source files
  sourceFiles: string[] // relative paths from sourceRoot to the template files
  destMap?: { [name: string]: string } // optional map of sourceFiles to destination paths
  defaultEditorFile?: string // file opened by default when editing this template. If not specified, the first file in sourceFiles is used
}

/**
 * Designed to be backwards compatible with the old way of representing dependencies as
 * {
 *    category: string
 *    resourceName: string
 *    attributes: string[]
 * }
 * and auto-generating environemnt variable names based on this info
 * When attributeEnvMap is specified, it can specify a custom environment variable name for a dependency attribute
 * If no mapping is found for an attribute in the map, then it falls back to the autogenerated value
 */
export interface FunctionDependency {
  category: string // resource category of the dependency
  resourceName: string // name of the dependency
  attributes: string[] // attributes that this function depends on (must be outputs of the dependencies CFN template)
  attributeEnvMap?: { [name: string]: string} // optional attributes to environment variable names map that will be exposed to the function
}

/**
 * Defines a list option of a template this plugin provides.
 * Name is a string presented to the customer for selection.
 * Value is used internally as a callback to create the selected option.
 */
export interface CreateableListOption {
  name: string
  create: () => Promise<FunctionParameters>
}