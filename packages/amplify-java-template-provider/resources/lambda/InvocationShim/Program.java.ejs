package InvocationShim;
import com.amazonaws.services.lambda.runtime.Context;
import example.*;
import com.google.gson.Gson;
import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;
import org.json.simple.parser.ParseException;
import java.lang.reflect.*;
import java.io.FileReader;
import java.io.IOException;
import java.io.Reader;

public class Main {

    public static void main(String[] args) throws IllegalAccessException, InstantiationException, NoSuchMethodException, InvocationTargetException {

        string pathToEventJson;
        if (args.Length > 0) {
            pathToEventJson = args[0];
        } 

        if (!System.IO.File.Exists(pathToEventJson)) {
            System.out.println("ERROR: invalid path");
            return;
        }
        System.out.println($"Loading event file from '{pathToEventJson}'");

        // read the jSON file to JSON object
        JSONParser parser = new JSONParser();
        JSONObject jsonObject = null;

        try (Reader reader = new FileReader(pathToEventJson)) {

            jsonObject = (JSONObject) parser.parse(reader);
            System.out.println(jsonObject);

        } catch (IOException e) {
            e.printStackTrace();
        } catch (ParseException e) {
            e.printStackTrace();
        }

        MockContext ct  = new MockContext();
        //reflection
        HelloPojo obj = new HelloPojo();
        Class cls = obj.getClass();
        Method[] methods = cls.getMethods();

        // Printing method names
        if(cls.getInterfaces()[0].getName().indexOf("RequestHandler") != -1) {
            var eventObj = new Gson().fromJson(jsonObject.toString(), (Type) methods[0].getParameterTypes()[0]);
            Method m = HelloPojo.class.getDeclaredMethod("handleRequest", (Class<?>) methods[0].getParameterTypes()[0], Context.class);
            Object response = m.invoke(obj, eventObj, new MockContext());
            System.out.println("EVENT: " + new Gson().toJson(response));
        }
        else{
            // implement for requestStreamHandler
        }
    }
}
